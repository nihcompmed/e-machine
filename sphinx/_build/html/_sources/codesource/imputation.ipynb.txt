{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Missing Data Imputation\n",
    "\n",
    "We demonstrade in this section an application of our method to impute missing values in experimental data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "import emachine as EM\n",
    "import itertools\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "An smoking data was used to illustrate the idea. The data set contains 1536 samples of 38 binary variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1536, 38)\n"
     ]
    }
   ],
   "source": [
    "s0 = np.loadtxt('smoking_data_processed.txt')\n",
    "print(s0.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Splitting the data into training samples and test samples\n",
    "We first split the data into 460 training samples and 1076 test samples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(460, 38) (1076, 38)\n"
     ]
    }
   ],
   "source": [
    "s_train,s_test = train_test_split(s0,test_size=0.7,random_state = 1)\n",
    "print(s_train.shape,s_test.shape)\n",
    "\n",
    "#np.savetxt('s_train.dat',s_train,fmt='%i')\n",
    "#np.savetxt('s_test.dat',s_test,fmt='%i')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x230.4 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nx,ny = 2,1\n",
    "fig, ax = plt.subplots(ny,nx,figsize=(nx*4,ny*3.2))\n",
    "\n",
    "ax[0].set_title('training set')\n",
    "ax[0].imshow(s_train.T[:,:101],cmap='gray',origin='lower')\n",
    "\n",
    "ax[1].set_title('original test set')\n",
    "ax[1].imshow(s_test.T[:,:101],cmap='gray',origin='lower')\n",
    "\n",
    "for i in range(nx):    \n",
    "    ax[i].set_xlabel('sample')\n",
    "    ax[i].set_ylabel('variable')\n",
    "    ax[i].set_yticks([0,10,20,30])\n",
    "       \n",
    "plt.tight_layout(h_pad=0.5, w_pad=0.6)\n",
    "#plt.savefig('fig1.pdf', format='pdf', dpi=100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Inferring the local fiels and pairwise interactions with the training samples\n",
    "We then apply EM method to predict the local fields `h0` for individual variables and pairwise interactions `w` between variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(460, 741)\n"
     ]
    }
   ],
   "source": [
    "ops = EM.operators(s_train)\n",
    "print(ops.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7 -90.97125777628806\n",
      "0.71 -90.0370848291644\n",
      "0.72 -89.15520227069703\n",
      "0.73 -88.32627999469725\n",
      "0.74 -87.55128825637009\n",
      "0.75 -86.83153251386894\n",
      "0.76 -86.16869719480155\n",
      "0.77 -85.56490097359782\n",
      "0.78 -85.02276703643429\n",
      "0.79 -84.54551302868458\n",
      "0.8 -84.13706706648992\n",
      "0.81 -83.80221856526629\n",
      "0.8200000000000001 -83.5468160312931\n",
      "0.8300000000000001 -83.37802891266647\n",
      "0.84 -83.30469797326157\n",
      "0.85 -83.33780984673744\n",
      "0.86 -83.49114880046875\n",
      "0.87 -83.7822063148659\n",
      "0.88 -84.2334739245864\n",
      "0.89 -84.87431965602296\n",
      "0.9 -85.74377728370874\n"
     ]
    }
   ],
   "source": [
    "eps_list = np.linspace(0.7,0.9,21)\n",
    "E_eps = np.zeros(len(eps_list))\n",
    "w_eps = np.zeros((len(eps_list),ops.shape[1]))\n",
    "for i,eps in enumerate(eps_list):    \n",
    "    w_eps[i,:],E_eps[i] = EM.fit(ops,eps=eps,max_iter=100)\n",
    "    print(eps,E_eps[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Energy')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(eps_list,E_eps,'ko-')\n",
    "plt.xlabel('$\\epsilon$')\n",
    "plt.ylabel('Energy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The optimal value of eps: 0.84\n"
     ]
    }
   ],
   "source": [
    "ieps = np.argmax(E_eps)\n",
    "print('The optimal value of eps:',eps_list[ieps])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So our inferred interactions from EM should be:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "w_em = w_eps[ieps]\n",
    "#np.savetxt('w_em.dat',w_em,fmt='%f')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As the output `w_em` is a combination of local fields `h0` and pairwise interactions `w`, we have to split them for demonstration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_var = s_train.shape[1]\n",
    "h0 = w_em[:n_var]\n",
    "w1d = w_em[n_var:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def convert_1d_to_2d(n_var):\n",
    "    ij2d = np.zeros((n_var,n_var))    \n",
    "    count = 0\n",
    "    for i in range(n_var-1):\n",
    "        for j in range(i+1,n_var):\n",
    "            ij2d[i,j] = count \n",
    "            count += 1           \n",
    "    return ij2d.astype(int)\n",
    "\n",
    "ij2d = convert_1d_to_2d(n_var)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "w2d = np.zeros((n_var,n_var))\n",
    "for i in range(0,n_var-1):\n",
    "    for j in range(i+1,n_var):\n",
    "        w2d[i,j] = w1d[ij2d[i,j]]\n",
    "\n",
    "w2d = w2d + w2d.T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The local fieds and interactions are plotted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x230.4 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nx,ny = 2,1\n",
    "fig, ax = plt.subplots(ny,nx,figsize=(nx*3.5,ny*3.2))\n",
    "\n",
    "ax[0].plot(h0,'ko',markersize=3)\n",
    "ax[0].set_xlabel('variable')\n",
    "ax[0].set_ylabel('local field')\n",
    "\n",
    "ax[1].set_title('interaction matrix')\n",
    "im = ax[1].imshow(w2d,cmap='rainbow',origin='lower')\n",
    "plt.colorbar(im,ax=ax[1],fraction=0.045, pad=0.05,ticks=[-1.0,0,1.0])\n",
    "ax[1].set_xlabel('variable $i$')\n",
    "ax[1].set_ylabel('variable $j$')\n",
    "\n",
    "ax[0].set_xticks([0,10,20,30])\n",
    "ax[0].set_yticks([-1,0,1])\n",
    "ax[1].set_xticks([0,10,20,30])\n",
    "ax[1].set_yticks([0,10,20,30])\n",
    "\n",
    "plt.tight_layout(h_pad=0.5, w_pad=0.6)\n",
    "#plt.savefig('fig1.pdf', format='pdf', dpi=100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Imputing missing values of the test samples"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To create a nasty test set with missing values from the original test set, we first find unconserved variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[8, 18, 33, 36]\n",
      "number of active variables: 34\n"
     ]
    }
   ],
   "source": [
    "# find conserved variables\n",
    "fc = 0.9\n",
    "l,n = s_test.shape\n",
    "frequency = [max(np.unique(s_test[:,i], return_counts=True)[1]) for i in range(n)]\n",
    "cols_conserved = [i for i in range(n) if frequency[i]/float(l) > fc]\n",
    "print(cols_conserved)\n",
    "\n",
    "cols_active = np.delete(np.arange(0,n),cols_conserved)\n",
    "print('number of active variables:',len(cols_active))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We then randomly select `n_hidden` variables in the test samples and define them as missing values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_hidden = 14\n",
    "s_hidden_all = np.array([])\n",
    "for t in range(l):\n",
    "    s = s_test[t].copy()\n",
    "    hidden = np.random.choice(cols_active,n_hidden,replace=False)       \n",
    "    s[hidden] = 0\n",
    "    s_hidden_all = np.vstack([s_hidden_all,s[np.newaxis,:]]) if s_hidden_all.shape[0]>0 else s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x230.4 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nx,ny = 2,1\n",
    "fig, ax = plt.subplots(ny,nx,figsize=(nx*4,ny*3.2))\n",
    "\n",
    "ax[0].set_title('original test set')\n",
    "ax[0].imshow(s_test.T[:,:101],cmap='gray',origin='lower')\n",
    "\n",
    "ax[1].set_title('noisy test set')\n",
    "ax[1].imshow(s_hidden_all.T[:,:101],cmap='gray',origin='lower')\n",
    "\n",
    "for i in range(nx):    \n",
    "    ax[i].set_xlabel('sample')\n",
    "    ax[i].set_ylabel('variable')\n",
    "    ax[i].set_yticks([0,10,20,30])\n",
    "       \n",
    "plt.tight_layout(h_pad=0.5, w_pad=0.6)\n",
    "#plt.savefig('fig1.pdf', format='pdf', dpi=100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now use the predicted local fiels and pairwise interaction from EM method to recover the test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Recovered accuracy: 0.8431359532660648\n"
     ]
    }
   ],
   "source": [
    "# every possibilities of configurations of hiddens\n",
    "s_hidden_possibles = np.asarray(list(itertools.product([1.0, -1.0], repeat=n_hidden)))\n",
    "n_possibles = s_hidden_possibles.shape[0]\n",
    "\n",
    "s_recover_all = np.array([])\n",
    "acc = np.zeros(l)\n",
    "# consider each specific sample t:\n",
    "for t in range(l):\n",
    "    s = s_hidden_all[t].copy()\n",
    "    \n",
    "    hidden = np.where(s==0)[0]    \n",
    "    s_possibles = np.tile(s,(n_possibles,1))    \n",
    "    s_possibles[:,hidden] = s_hidden_possibles\n",
    "\n",
    "    # calculate energy of each possible configuration\n",
    "    ops = EM.operators(s_possibles)\n",
    "\n",
    "    #----------------------------------------------\n",
    "    # recover by EM\n",
    "    energy = -ops.dot(w_em)\n",
    "    s_hidden_recover = s_hidden_possibles[np.argmin(energy)]\n",
    "    \n",
    "    # recovered accuracy\n",
    "    acc[t] = np.sum((s_test[t,hidden] == s_hidden_recover))\n",
    "    #print(acc[t])\n",
    "    \n",
    "    # recovered configurations\n",
    "    s_recover = s.copy()\n",
    "    s_recover[hidden] = s_hidden_recover\n",
    "    s_recover_all = np.vstack([s_recover_all,s_recover[np.newaxis,:]]) \\\n",
    "                    if s_recover_all.shape[0]>0 else s_recover\n",
    "       \n",
    "acc_av = acc.sum()/(n_hidden*l)\n",
    "print('Recovered accuracy:',acc_av)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The recovered data is plotted along with the original data and missing data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x432 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nx,ny = 1,3\n",
    "fig, ax = plt.subplots(ny,nx,figsize=(nx*4,ny*2.0))\n",
    "\n",
    "ax[0].set_title('original test set')\n",
    "ax[0].imshow(s_test.T[:,:101],cmap='gray',origin='lower')\n",
    "\n",
    "ax[1].set_title('noisy test set')\n",
    "ax[1].imshow(s_hidden_all.T[:,:101],cmap='gray',origin='lower')\n",
    "\n",
    "ax[2].set_title('recovered test set')\n",
    "ax[2].imshow(s_recover_all.T[:,:101],cmap='gray',origin='lower')\n",
    "\n",
    "for i in range(ny):    \n",
    "    ax[i].set_xlabel('sample')\n",
    "    ax[i].set_ylabel('variable')\n",
    "    ax[i].set_yticks([0,10,20,30])\n",
    "       \n",
    "plt.tight_layout(h_pad=0.5, w_pad=0.6)\n",
    "#plt.savefig('fig2.pdf', format='pdf', dpi=100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Performance comparison with PLE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To estimate the performance of EM, we compute tha accuracy for various values of missing variables and compare with the PLE method. This work is performed separately. In the Jupyter Notebook, we just report the result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "acc = np.loadtxt('acc.dat')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nx,ny = 1,1\n",
    "fig, ax = plt.subplots(ny,nx,figsize=(nx*4,ny*3.0))\n",
    "\n",
    "ax.plot(acc[3:,0],acc[3:,2],'bs--',mfc='none',markersize=5,label='PLE')\n",
    "ax.plot(acc[3:,0],acc[3:,3],'ro-',markersize=5,label='EM')\n",
    "ax.set_xlabel('Number of missing variables in each sample')\n",
    "ax.set_ylabel('Accuracy')\n",
    "\n",
    "ax.set_xticks([8,10,12,14,16])\n",
    "ax.legend()\n",
    "\n",
    "vals = ax.get_yticks()\n",
    "ax.set_yticklabels(['{:,.0%}'.format(x) for x in vals])\n",
    "\n",
    "plt.tight_layout(h_pad=0.5, w_pad=0.6)\n",
    "#plt.savefig('fig3.pdf', format='pdf', dpi=100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is clear that EM works significantly better than PLE. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
