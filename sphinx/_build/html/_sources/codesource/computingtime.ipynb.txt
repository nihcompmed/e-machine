{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Computing time"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We compare the computing time of our method with those of other existing methods, including Hopfield approximation (HF), Maximum Likelihood Estimation (MLE), and Pseudo Likelihood Estimations (PLE). The code for PLE was adapted from ConIII package (https://github.com/eltrompetero/coniii).\n",
    "\n",
    "As shown in the previous sections, MLE cannot work for a large system such as 40 variables and PLE cannot work for a very large system size such as 100 variables. In the following, we will consider a small system with 20 variables. The computing time of MLE and PLE increases rapidly as system size increases (see our paper for more detail)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import emachine as EM\n",
    "import timeit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We set parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_var = 20\n",
    "g = 1.0\n",
    "n_seq = 400"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Variable configurations are generated."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "w_true,seqs = EM.generate_seq(n_var,n_seq,g=g)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "ops = EM.operators(seqs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Erasure Machine (EM)\n",
    "start_time = timeit.default_timer()\n",
    "\n",
    "eps_list = np.linspace(0.5,0.9,9)\n",
    "E_eps = np.zeros(len(eps_list))\n",
    "w_eps = np.zeros((len(eps_list),ops.shape[1]))\n",
    "for i,eps in enumerate(eps_list):    \n",
    "    w_eps[i,:],E_eps[i] = EM.fit(ops,eps=eps,max_iter=100)\n",
    "    #print(eps,E_eps[i])    \n",
    "ieps = np.argmax(E_eps)\n",
    "#print('The optimal value of eps:',eps_list[ieps])\n",
    "w_em = w_eps[ieps]\n",
    "\n",
    "run_time_em = timeit.default_timer() - start_time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Hopfield approximation (HF)\n",
    "start_time = timeit.default_timer()\n",
    "w_hf = EM.hopfield_method(seqs)\n",
    "run_time_hf = timeit.default_timer() - start_time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Maximum Likelihood Estimation (MLE)\n",
    "start_time = timeit.default_timer()\n",
    "w_mle = EM.MLE_method(seqs)\n",
    "run_time_mle = timeit.default_timer() - start_time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Pseudo Likelihood Estimation (PLE)\n",
    "start_time = timeit.default_timer()\n",
    "w_ple = EM.PLE_method(seqs)\n",
    "run_time_ple = timeit.default_timer() - start_time"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We compare the performance and computing time of these methods."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Method</th>\n",
       "      <th>Mean squared error</th>\n",
       "      <th>Computing time (s)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>EM</td>\n",
       "      <td>0.017399</td>\n",
       "      <td>0.282543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>HF</td>\n",
       "      <td>0.087274</td>\n",
       "      <td>0.001733</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>MLE</td>\n",
       "      <td>0.025202</td>\n",
       "      <td>290.850171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>PLE</td>\n",
       "      <td>0.052717</td>\n",
       "      <td>2.742374</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Method  Mean squared error  Computing time (s)\n",
       "0     EM            0.017399            0.282543\n",
       "1     HF            0.087274            0.001733\n",
       "2    MLE            0.025202          290.850171\n",
       "3    PLE            0.052717            2.742374"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MSE_em = ((w_true - w_em)**2).mean()\n",
    "MSE_hf = ((w_true - w_hf)**2).mean()\n",
    "MSE_mle = ((w_true - w_mle)**2).mean()\n",
    "MSE_ple = ((w_true - w_ple)**2).mean()\n",
    "\n",
    "df = pd.DataFrame([['EM',MSE_em,run_time_em],\n",
    "                   ['HF',MSE_hf,run_time_hf],\n",
    "                   ['MLE',MSE_mle,run_time_mle],\n",
    "                   ['PLE',MSE_ple,run_time_ple]],\n",
    "                  columns = ['Method','Mean squared error','Computing time (s)'])\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
